const COOKIE = {
    secret: 'secret',
    time: 30 * 24 * 3600, // 30 Days
    hstsAge: 2592000 // 1 month
};

const bodyParser = require('body-parser');
const browserSync = require('browser-sync');
const compression = require('compression');
const cookieParser = require('cookie-parser');
// const RateLimit = require('express-rate-limit');
const session = require('express-session');
const lusca = require('lusca');
const redisClient = require('redis').createClient();
const RedisStore = require('connect-redis')(session); // Session redis cache
const expressValidator = require('express-validator');
const favicon = require('serve-favicon');
const isProduction = process.env.NODE_ENV === 'production';
const express = require('express');
const path = require('path');
const port = process.env.PORT || 5000;

/** Database */
const mongo = require('mongodb');
const db = require('monk')('mongodb://localhost:27017/MyDatabase');
// Mongoose + Plugins
const mongoose = require('mongoose');
mongoose.Promise = require('bluebird');
mongoose.plugin(require('mongoose-timestamp'));
const passport = require('passport');
const flash = require('connect-flash');
mongoose.set('debug', true);
const promise = mongoose.connect('mongodb://localhost:27017/Hospital');
require('./app/security/passport')(passport);


// App
const app = express();


/**
 * Views
 */
// Set base director for views to allow absolute paths
app.locals.basedir = [path.join(__dirname, 'app/views'), path.join(__dirname, 'app/views/admin'),
    path.join(__dirname, 'app/views/patient')];
app.set('views', app.locals.basedir);
app.set('view engine', 'pug');
// app.set('view cache', true);

/** Session */
if (isProduction) {
    app.set('trust proxy', 1);
}

app.use(session({
    store: new RedisStore({
        client: redisClient,
        ttl: COOKIE.time,
        logErrors: true
    }),
    name: 'SID',
    secret: COOKIE.secret,
    resave: true,
    saveUninitialized: true,
    rolling: true,
    proxy: isProduction,
    cookie: {
        httpOnly: true,
        secure: isProduction,
        sameSite: true,
        expires: COOKIE.time * 1000,
        maxAge: COOKIE.time * 1000
    }
}));
redisClient.on('connect', function () {
    console.info('Redis: Connection established');
});


// Validator
app.use(expressValidator({
    errorFormatter: function (param, msg, value) {
        const namespace = param.split('.');
        let formParam = namespace.shift();

        while (namespace.length) {
            formParam += '[' + namespace.shift() + ']';
        }
        return {
            param: formParam,
            msg: msg,
            value: value
        };
    }
}));

app.use(compression());
// app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: false}));
app.use(cookieParser(COOKIE.secret));


/**
 * App Resources
 *
 * requests for static assets will be handled immediately and will not pass through session check
 */
app.use("/static/resources/dist", express.static(path.join(__dirname, 'dist')));
app.use("/static/resources", express.static(path.join(__dirname, 'static')));


/** Security */
app.disable('x-powered-by');
app.use(lusca({
    csrf: true,
    xframe: 'SAMEORIGIN',
    hsts: {maxAge: COOKIE.hstsAge, includeSubDomains: true, preload: true},
    xssProtection: true,
    nosniff: true,
    referrerPolicy: 'same-origin'
}));
app.use(passport.initialize());
app.use(passport.session()); // persistent login sessions
app.use(flash()); // use connect-flash for flash messages stored in session


/**
 * Request Processing
 */

// Redis connection lost
app.use(function (req, res, next) {
    if (!req.session) {
        return next(new Error('Unknown server error')) // handle error
    }

    next();
});

// Process on each request
app.use(function (req, res, next) {
    req.db = db;

    res.locals.messages = require('express-messages')(req, res);
    res.locals.user = req.user;

    // Angularâ€™s $http library reads the token from the XSRF-TOKEN cookie.
    // res.cookie('XSRF-TOKEN', req.csrfToken());
    // req.session._csrf is automatically generated by lusca.csrf()

    next();
});

// Routes
require('./app/routes')(app, isProduction, passport);

// Production
if (isProduction) {

    app.listen(port, function () {
    });

    process.setuid('app_user');
}
// Development
else {
    browserSync.create().init({
        server: './public',
        files: [
            './app/views/**/*.pug',
            './dist/**',
            './static/**'
        ],
        middleware: [app],
        open: false,
        notify: false,
        reloadOnRestart: true
    });
}

/** Errors */
app.use(function (err, req, res, next) {

    if (typeof err.statusCode === 'undefined') {
        err.statusCode = res.statusCode;
    }

    if (err.statusCode === 403) {
        err.message = 'Your session has expired due to inactivity';
    }

    res.status(err.statusCode || 500);
    res.render('error', {
        title: 'Error (' + err.statusCode + ')',
        error: err
    });
});

redisClient.on('end', function () {
    console.error('Redis: Connection closed');
});
redisClient.on('reconnecting', function () {
    console.info('Redis: reconnecting');
});

module.exports = app;
